seqdiag {
  # Change edge metrics
  edge_length = 150; // default value is 192
  span_height = 0;   // default value is 40

  # Change note color
  default_note_color = lightblue;

  # actors (in order left to right)
  User; UAA; Controller; FabrikPoller; Broker; Agent; Service; IaaS;

  # get token
  User => UAA [label = "get token", return = "token"]

  # trigger backup
  User ->> Broker [label = "trigger backup"]
  Broker -> Controller [label = "trigger update", leftnote =
        "done to shift work away from broker
        and onto controller; controller will
        now do heavy-lifting like polling
        and preventing parallel operations;
        payload contains user and operation"]
    User <-- Broker [label = "ok"]
    # controller starts update
    Controller -> Broker [label = "run update = backup"]
    Broker => Agent [label = "backup supported?", return = "yes"]
    Broker => Bosh Director [label = "create _lock_ property"]
    Broker ->> Agent [label = "trigger backup"]
    Broker => IaaS [label = "create backup record"]
    Broker -> FabrikPoller [ label = "Start Poller" ]
    Controller <-- Broker [ label = "async ok 202" ]
    Broker <- Controller [ label = "update triggered" ]

  # agent starts backup
  Agent => IaaS [label = "create snapshot from volume"]
  Agent => IaaS [label = "create, attach, and mount cloned volume"]
  Agent => IaaS [label = "create, attach, and mount temporary volume"]
  Agent => Agent [label = "create/encrypt tarball"]

  # broker asks for last operation status
  FabrikPoller => Broker [ label = "check status" ]{
    Broker => Agent [label = "backup state?", return = "processing"]
  }

  # agent continues backup
  Agent => IaaS [label = "upload tarball to blob store"]
  Agent => IaaS [label = "unmount, detach, and delete temporary volume"]
  Agent => IaaS [label = "unmount, detach, and delete cloned volume"]
  Broker <<-- Agent [label = "backup completed\nno actual callback"]

  # broker asks for last operation status
  FabrikPoller => Broker [ label = "check status" ]{
    Broker => Agent [label = "backup state?", return = "succeeded"]
    Broker => Agent [label = "fetch logs", return = "logs"]
    Broker => IaaS [label = "update backup record with logs"]
  }
  FabrikPoller -> Controller [ label = "trigger unlock" ]
  Controller -> Broker [ label = "run update = Unlock" ]
  Broker => Bosh Director [label = "delete _lock_ property"]
  Controller <- Broker [ label = "ok"]
}
