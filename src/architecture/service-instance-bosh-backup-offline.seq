seqdiag {
  # Change edge metrics
  edge_length = 150; // default value is 192
  span_height = 0;   // default value is 40

  # Change note color
  default_note_color = lightblue;

  # actors (in order left to right)
  User; UAA;Controller;FabrikApi;BrokerApi; BoshDirector; Agent; Service; IaaS;

  # get token
  User => UAA [label = "get token", return = "token"]

  # trigger backup
  User -> FabrikApi [label = "trigger backup"]
  FabrikApi -> Controller [label = "trigger update", leftnote =
        "done to ensure mutual exclusivity with upgrade/delete operations"];
    # controller starts update
    Controller -> BrokerApi [label = "run update = backup"]
    BrokerApi => Agent [label = "backup supported?", return = "yes"]
    BrokerApi => BoshDirector [label = "create _lock_ property on deployment", return = "true", rightnote=
                                        "This is a simple name/value stored at the deployment level.
                                          HTTP Post:/deployments/${deploymentName}/properties
                                        
                                        For now since backup operation is internally sent via cf update operation, maintaining this
                                        state via this property on bosh deployment is good enough & its truly not a semaphore
                                        but just a simple flag to indicate an on-going backup on the deployment."];
    BrokerApi ->> Agent [label = "trigger backup"]
    BrokerApi => IaaS [label = "create backup record"]
    Controller <-- BrokerApi [ label = "async ok 202" ]
    FabrikApi <- Controller [ label = "update triggered", leftnote = 
              "response returned back to user & status check  
              performed via poller at regular intervals in background" ];
    FabrikApi -> FabrikApi [ label = "Start Poller" ]

  # agent starts backup
  Agent => Service [label = "monit stop service"]
  Agent => IaaS [label = "create, attach, and mount temporary volume"]
  Agent => Agent [label = "create/encrypt tarball"]

  # FabrikStatusPoller asks for last operation status
  FabrikApi => FabrikApi [ label = "check status" ]{
    FabrikApi => Agent [label = "backup state?", return = "processing"];
  }

  # agent continues backup
  Agent => Service [label = "monit start service"]
  Agent => IaaS [label = "upload tarball to blob store"]
  Agent => IaaS [label = "unmount, detach, and delete temporary volume"]
  Agent => Service [label = "wait for service"]
  FabrikApi <<-- Agent [label = "backup completed\nno actual callback"]

  # broker asks for last operation status
  FabrikApi => FabrikApi [ label = "check status" ]{
    FabrikApi => Agent [label = "backup state?", return = "succeeded"]
    FabrikApi => Agent [label = "fetch logs", return = "logs"]
    FabrikApi => IaaS [label = "update backup record with logs"]
  }
  FabrikApi -> Controller [ label = "trigger unlock" ]
  Controller -> BrokerApi [ label = "run update = Unlock" ]
  BrokerApi => BoshDirector [label = "delete _lock_ property on the deployment", rightnote=
                          "HTTP Delete : /deployments/${deploymentName}/properties/${propertyName}
                          Remove the flag once backup is complete"]
  Controller <- BrokerApi [ label = "ok"]
  FabrikApi <-- Controller [ label = "update complete" ]
}
