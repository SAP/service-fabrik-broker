{{ $randomString := randAlphaNum 5 | quote -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-scheduler-controller-manager
  labels:
    app: {{ .Release.Name }}-scheduler-controller-manager
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-controller-manager
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-controller-manager
        control-plane: {{ .Release.Name }}-scheduler-controller-manager
        rollme: {{ $randomString }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 6 }}
      {{- end }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            control-plane: {{ .Release.Name }}-scheduler-controller-manager
            rollme: {{ $randomString }}
      containers:
      - name: scheduler
        image: "{{ .Values.interoperator.image.repository }}:{{ .Values.interoperator.image.tag }}"
        imagePullPolicy: {{ .Values.interoperator.image.pullPolicy }}
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command:
        - /scheduler
        args:
        - --metrics-addr=:8443
        - --enable-leader-election
        resources:
          limits:
            cpu: {{ .Values.interoperator.resources.limits.cpu }}
            memory: {{ .Values.interoperator.resources.limits.memory }}
          requests:
            cpu: {{ .Values.interoperator.resources.requests.cpu }}
            memory: {{ .Values.interoperator.resources.requests.memory }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: 8443
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: 8443
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 1
        ports:
        - containerPort: 8443
          name: http
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/port: "8443"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
  labels:
    control-plane: {{ .Release.Name }}-scheduler-controller-manager
  name: {{ .Release.Name }}-scheduler-metrics-service
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: http
    port: 8443
    targetPort: http
  selector:
    control-plane: {{ .Release.Name }}-scheduler-controller-manager