@startuml
!pragma teoz true
skinparam monochrome false
skinparam sequenceMessageAlign center
skinparam handwritten false
skinparam BoxPadding 30
autoactivate off

title Service Fabrik MCD SFServiceInstance Replicator 

participant Broker
box "Master Cluster" #LightBlue
    collections APIServer
    control MCD_SFServiceInstance_Replicator
end box
box "Sister Cluster" #lightgreen
    collections APIServer as APIServer2
end box

Broker -> APIServer : Create SFServiceInstance
APIServer -> MCD_SFServiceInstance_Replicator ++: Watch event (SFServiceInstance)
MCD_SFServiceInstance_Replicator -> APIServer : Get SFServiceInstance
APIServer --> MCD_SFServiceInstance_Replicator : SFServiceInstance
MCD_SFServiceInstance_Replicator -> MCD_SFServiceInstance_Replicator : Get Target Cluster ID

alt #transparent Cluster ID Not set
    MCD_SFServiceInstance_Replicator --> MCD_SFServiceInstance_Replicator : Return
else Cluster ID is master Cluster
    MCD_SFServiceInstance_Replicator --> MCD_SFServiceInstance_Replicator : Return
else Cluster ID is a diffent Cluster
    alt #transparent If SFServiceInstance deletion timestamp is set\n and ns is deleting/deleted in master
        MCD_SFServiceInstance_Replicator -> APIServer2 : Delete Namepace
    else SFServiceInstance deletion timestamp not set\n and NS not exist in sister
        MCD_SFServiceInstance_Replicator -> APIServer2 : Create Namepace
    end
    alt #transparent If SFServiceInstance deletion timestamp is \nset and state is delete in master
        MCD_SFServiceInstance_Replicator -> APIServer2 : Trigger delete SFServiceInstance
    end
    alt #transparent State is in_queue/update/delete in master
        alt #transparent If SFServiceInstance not found in sister\n and state is not delete in master
            MCD_SFServiceInstance_Replicator -> APIServer2 : Create SFServiceInstance in sister from master
        end
        alt #transparent If SFServiceInstance found in sister
            MCD_SFServiceInstance_Replicator -> APIServer2 : Update SFServiceInstance in sister from master
        end
        MCD_SFServiceInstance_Replicator -> APIServer : Set state as in_progress in master and \nset lastoperation as the previous state
    end
    alt #transparent State is in_progress in master
        MCD_SFServiceInstance_Replicator -> APIServer2 : Get SFServiceInstance
        APIServer2 --> MCD_SFServiceInstance_Replicator : SFServiceInstance
        alt #transparent If SFServiceInstance not found in sister\n and state is delete in master
            MCD_SFServiceInstance_Replicator -> MCD_SFServiceInstance_Replicator : Set SFServiceInstance state as succeeded
        else if state is sister is in_queue/update/delete
            MCD_SFServiceInstance_Replicator --> MCD_SFServiceInstance_Replicator : Return
        else
            MCD_SFServiceInstance_Replicator --> MCD_SFServiceInstance_Replicator : Copy SFServiceInstance from sister to master
        end
        MCD_SFServiceInstance_Replicator -> APIServer --: Update SFServiceInstance in master
    end
end
deactivate MCD_SFServiceInstance_Replicator
@enduml